' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package security.auth {
  class "type Role = 'ADMIN' | 'MITARBEITER' | 'KUNDE'" as Role
  hide Role circle

  class "@Roles" as Roles
  hide Roles circle

  Roles .right.> Role
}

package videospiel #DDDDDD {
  package entity #FFFFFF {
    class Videospiel <<entity>>
  }

  package service #FFFFFF {
    class VideospielWriteService << control >>
  }

  class "type VideospielDTO = Omit<Videospiel, 'aktualisiert' | 'erzeugt' | 'schlagwoerter'> & { schlagwoerter: string[] }" as VideospielDTO
  hide VideospielDTO circle

  class VideospielMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() videospiel: Videospiel): Promise<string>
    + @Mutation() @Roles() async update(@Args() videospiel: VideospielDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: string): Promise<boolean>
  }

  VideospielMutationResolver o-down-> "1" VideospielhWriteService : service

  VideospielMutationResolver ..> Videospiel
  VideospielMutationResolver ..> VideospielDTO
  VideospielDTO .up.> Videospiel
  VideospielMutationResolver ..> Promise
  VideospielMutationResolver ..> Resolver

  VideospielMutationResolver .up.> Roles
  VideospielMutationResolver .up.> Role

  VideospielDTO .[hidden].> Promise
  VideospielDTO .[hidden].> Resolver
}

hide empty members

footer (c) VideospielMutationResolver.plantuml

@enduml
